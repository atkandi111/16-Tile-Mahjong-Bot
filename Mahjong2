#Taiwanese Mahjong
#16-Tile Variant

from collections import Counter
from itertools import combinations
from random import shuffle

print("\033c", end = "")

def Group_Sets(hand):
    freq = Counter(hand)
    pair, pong, chow = [], [], []
    pair = [[x] * 2 for x in freq if freq[x] > 1]
    pong = [[x] * 3 for x in freq if freq[x] > 2]
    for item in freq:
        suit, unit = item[0], item[1]
        if unit.isalpha():
            continue

        seqn = [0, 1, 2]
        seqn = [x + int(unit) for x in seqn]
        seqn = [suit + str(x) for x in seqn]

        chow += [seqn] * min([freq[x] for x in seqn])
    return pair, pong, chow

def Potential_Meld(hand):
    freq = Counter(hand)
    semi_meld, need_tile = [], []
    for item in freq:
        suit, unit = list(item)
        if unit.isalpha():
            continue

        seqn = [-1, 0, 1, 2]
        seqn = [x + int(unit) for x in seqn]
        seqn = [suit + str(x) for x in seqn]

        lack = {
            (seqn[1], seqn[2]) : (seqn[0], seqn[3]),
            (seqn[1], seqn[3]) : (seqn[2], )
        }

        for key, val in lack.items():
            semi_meld += [key] * min([freq[x] for x in key])
            need_tile += [val] * min([freq[x] for x in key])
    return semi_meld, need_tile

def Tiles_Needed(hand, freq, card):
    suit, unit = list(card)
    tile_needed = []
    
    if unit.isalpha():
        seqn = [card]
    else:
        seqn = [-2, -1, 0, 1, 2]
        seqn = [x + int(unit) for x in seqn]
        seqn = [suit + str(x) for x in seqn]

    completing_seqn = {
        (seqn[0], seqn[2]) : (seqn[1], ),
        (seqn[1], seqn[2]) : (seqn[0], seqn[3]),
        (seqn[2], seqn[2]) : (seqn[2], ),
        (seqn[2], seqn[3]) : (seqn[1], seqn[4]),
        (seqn[2], seqn[4]) : (seqn[3], )
    }

    for pre_meld, card in completing_seqn.items():
        if (Counter(list(pre_meld)) - Counter(hand)):
            continue

        tile_needed += list(card) * min([freq[x] for x in card])

    return Sorter(tile_needed)

def Suggest_Discard(hand, opened, discard):
    pair, pong, chow = Group_Sets(hand)
    semi_meld, need_tile = Potential_Meld(hand)

    weight = {}
    freq = Counter(hand + opened + discard)
    for i in freq:
        freq[i] = 4 - freq[i]
    for card in hand:
        weight[card] = Tiles_Needed(hand, freq, card)

    if len(pair) < 5:
        case_pool = [*combinations(pong + chow + pair + semi_meld, len())]

    #1. Decompose hand maximizing true-melds
    #2. Decompose hand into pre-melds maximizing number of tiles_needed
    #3. Weight remaining tiles by number of near_cards

""""""""""""""""""

def Decompose_Meld(hand):
    pair, pong, chow = Group_Sets(hand)

    full_meld, semi_meld = [], []
    length = len(hand) // 3

    winning_case = False
    class_of_win = "Standard"

    eye_pool = pair

    while full_meld == [] and length > 0:
        case_pool = [*combinations(pong + chow, length)]
        full_meld = pong + chow + eye_pool
        for eye in eye_pool:
            for item in case_pool:
                item = item + (eye, )
                case = [x for meld in item for x in meld]
                if (Counter(case) - Counter(hand)):
                    """
                    TRUE if num_case > num_hand
                    implies some cards are duplicated
                    testcase doesnt reflect hand
                    """
                    continue
                full_meld = [i for i in full_meld if i in item]
                """
                removes meld if not present in all testcases
                where num_meld is maximized
                """
            length = length - 1
    
    semi_meld = hand.copy()
    case = [x for meld in full_meld for x in meld]
    print(case)
    while case:
        semi_meld.remove(case.pop())

    Tiles_Needed(semi_meld)

    #return full_meld, semi_meld
    
"""
Flowchart:
1. Group together melds
2. Weight incomplete cards
    Priority based on number of cards
    available needed to complete a meld
3. Discard card with lowest weight
"""

""""""""""""""""""

def Check_Win(hand):
    pair, pong, chow = Group_Sets(hand)
    winning_case = False
    class_of_win = "Standard"

    if len(pair) < 7:
        case_pool = [*combinations(pong + chow, len(hand) // 3)]
        eye_pool = pair
    else: #7 Pairs
        case_pool = [*combinations(pair, 7)]
        eye_pool = pong + chow

    for eye in eye_pool:
        for item in case_pool:
            case = [x for meld in item for x in meld]
            if Counter(case + eye) != Counter(hand):
                continue
            
            winning_case = True
            if all(x in pair for x in item):
                class_of_win = "7 Pairs"
            if all(x in pong for x in item): 
                class_of_win = "Todo Pong"
    
    return winning_case, class_of_win

def Sorter(hand):
    suit = [x for x in hand if x[1].isdigit()]
    null = [x for x in hand if x[1].isalpha()]

    return sorted(suit) + sorted(null)

def Solo_Game():
    tiles = [
        "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9",
        "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "s9",
        "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9",
        "dN", "dE", "dW", "dS", "tG", "tR", "tW", "fR", "fB"
    ] * 4

    reference = set(tiles)

    """
    naming-scheme: class + value
    ----- classes: ball, stick, char, 
    -------------: direction, trash, flower
    """

    shuffle(tiles)
    hand, tiles = tiles[:16], tiles[16:]
    opened, discard = [], []

    while tiles:
        print("\033c", end = "")
        print("Open:", *opened, sep = " ")
        print("Discard:", *discard, sep = " ")

        print("- - - - - - - - - - - - - -")

        print("Grab:", tiles[0])
        hand.append(tiles.pop(0))

        flower = []
        for card in hand:
            if card[0] == "f" and tiles:
                opened.append(card)
                hand.remove(card)

                flower.append(tiles[-1])
                hand.append(tiles.pop())
        if flower:
            print("Flower:", *flower, sep = " ")
            #note: doesn't work if pick flower again

        print(*Sorter(hand), sep = " ")
        if Check_Win(hand)[0]:
            print("You Won!")
            break

        print("Suggested:", Suggest_Discard(hand, opened, discard))

        toss = hand.index(input("Throw: "))
        discard.append(hand.pop(toss))
        #add try-except for incorrect input

Solo_Game()

"""
Flowchart:
1. Prepare Hand and Tiles
2. Pick a tile
3. Check and replace flowers
4. Check if winning hand
5. If winning hand
    True:   stop game
            compute payment
    False:  discard a tile
            check for concealed kang
            repeat from 2
"""
